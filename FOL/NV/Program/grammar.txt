start = definition* notation* theorem*


definition = 'definition.' name '(' name* ')' formula


notation = 'notation.' '(' ascii+ ')' name


theorem = 'theorem.' name? hypothesis* formula body

hypothesis = '(' name ':' formula ')'

body = '(' (instruction ';')* ')'


formula = pred | eq | in | true | false | not | imp | and | or | iff | forall | exists

pred = name '(' name* ')'
eq = name '=' name
in = name 'in.' name
true = 'T.'
false = 'F.'
not = '(' '~' formula ')'
imp = '(' formula '->' formula ')'
and = '(' formula '/\' formula ')'
or = '(' formula '\/' formula ')'
iff = '(' formula '<->' formula ')'
forall = '(' 'A.' name formula ')'
exists = '(' 'E.' name formula ')'

name = letter (letter | digit | '_')*

letter = ('a' | ... | 'z' | 'A' | ... | 'Z')
digit = '0' | ... | '9'


instruction = ?

-----

theorem. prop_id (P() -> P())
(
  1. prop_2 P() (P() -> P()) P();
  2. prop_1 P() (P() -> P());
  3. mp 1 2;
  4. prop_1 P() P();
  5. mp 3 4;
)

theorem. (Q() -> Q())
(
  prop_id [P() -> Q()];
)

theorem. (P() -> P())
(
  intro a1;
  a1;
)

theorem. (h1 : P()) (h2 : Q()) P()
(
  h1;
)

theorem. prop_id (h1 : P()) P()
(
  h1;
)

theorem. eq_id x = x
(
  admit;
)

-----

(A. x P())
(A. x P(x))
(A. x P(x y))
(A. x x = x)
(A. x x in. x)
(A. x (~ x = x))
(A. x (~ x in. x))
((A. x (E. y x = y)) -> y in. z)
((~ P()) -> P())
(~ (P() -> (P() -> P())))
