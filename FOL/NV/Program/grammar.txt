start = definition* notation* theorem*


definition = 'definition' name '(' name* ')' ':' formula ';'

notation = 'notation' name '(' name* ')' ':' literal+ ';'
literal = name | '$' notation_char+ '$'
notation_char = some character from a restricted set of ascii characters


theorem = 'theorem' name? hypothesis* formula proof

hypothesis = '(' name ':' formula ')'

proof = '(' (instruction ';')* ')'


formula = '(' formula ')' | pred | eq | in | true | false | not | imp | and | or | iff | forall | exists


pred = name '(' (name (',' name)*)? ')'
eq = '(' name '=' name ')'
in = '(' name 'in.' name ')'
true = 'T.'
false = 'F.'
not = '~' formula
imp = '(' formula '->' formula ')'
and = '(' formula '/\' formula ')'
or = '(' formula '\/' formula ')'
iff = '(' formula '<->' formula ')'
forall = 'A.' name formula
exists = 'E.' name formula


name = (letter | '_') (letter | digit | '_')*

letter = ('a' | ... | 'z' | 'A' | ... | 'Z')
digit = '0' | ... | '9'


instruction = ?

-----

theorem prop_id (P() -> P())
(
  1. prop_2 P() (P() -> P()) P();
  2. prop_1 P() (P() -> P());
  3. mp 1 2;
  4. prop_1 P() P();
  5. mp 3 4;
)

theorem (Q() -> Q())
(
  prop_id [P() -> Q()];
)

theorem (P() -> P())
(
  intro a1;
  a1;
)

theorem (h1 : P()) (h2 : Q()) P()
(
  h1;
)

theorem prop_id (h1 : P()) P()
(
  h1;
)

theorem eq_id (x = x)
(
  admit;
)

theorem eq_id A. x (x = x)
(
  admit;
)

-----

A. x P()
A. x P(x)
A. x P(x y)
A. x (x = x)
A. x (x in. x)
A. x ~ (x = x)
A. x ~ (x in. x)
(A. x E. y (x = y) -> (y in. z))
(~ P() -> P())
~ (P() -> (P() -> P()))

-----

# zero or more comma separated terminals

seq -> item remainder | "EOF" .
remainder -> "," item remainder | "EOF" .

-----

# zero or more terminals

seq -> item seq | EOF .

-----

formula -> pred | eq | not | imp .

pred -> name "(" name_seq .
name_seq -> name name_seq_remainder | ")" .
name_seq_remainder -> "," name name_seq_remainder | ")" .

eq -> "(" name "=" name ")" .
not -> "~" formula .
imp -> "(" formula "->" formula ")" .

